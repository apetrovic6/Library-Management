schema {
  query: Query
  mutation: Mutations
}

type Query {
  books(paging: PagingInput! bookFilterInput: BookFilterInput!): GetBooksResponse!
  bookById(id: Int!): GetBookByIdResponse!
  authors(paging: PagingInput!): GetAuthorsResponse!
  authorById(id: Int!): GetAuthorByIdResponse!
  authorByName(name: String!): GetAuthorByNameResponse!
}

type Mutations {
  createBook(bookInput: CreateBookInput!): CreateBookResponse!
  updateBook(id: Int! bookInput: UpdateBookInput!): UpdateBookResponse!
  deleteBook(id: Int!): DeleteBookResponse!
  createAuthor(authorInput: CreateAuthorInput!): CreateAuthorResponse!
  updateAuthor(authorInput: UpdateAuthorInput!): UpdateAuthorResponse!
  deleteAuthor(id: Int!): DeleteAuthorResponse!
}

input PagingInput {
  page: Int!
  pageSize: Int!
}

type GetBooksResponse {
  clone: GetBooksResponse
  calculateSize: Int!
  data: [BookModel]
  pageInfo: PageInfo
}

input BookFilterInput {
  authorName: String!
}

type GetBookByIdResponse {
  clone: GetBookByIdResponse
  calculateSize: Int!
  book: BookModel
}

type GetAuthorsResponse {
  clone: GetAuthorsResponse
  calculateSize: Int!
  data: [AuthorDTO]
  pageInfo: AuthorPageInfo
}

type GetAuthorByIdResponse {
  clone: GetAuthorByIdResponse
  calculateSize: Int!
  author: AuthorDTO
}

type GetAuthorByNameResponse {
  clone: GetAuthorByNameResponse
  calculateSize: Int!
  authors: [AuthorDTO]
}

type CreateBookResponse {
  clone: CreateBookResponse
  calculateSize: Int!
  book: BookModel
}

input CreateBookInput {
  title: String!
  author: String!
  year: Int!
  country: String!
  language: String!
  imageLink: String!
  stock: Int!
  description: String!
}

type UpdateBookResponse {
  clone: UpdateBookResponse
  calculateSize: Int!
  book: BookModel
}

input UpdateBookInput {
  id: Int!
  title: String!
  author: String!
  year: Int!
  country: String!
  language: String!
  imageLink: String!
  stock: Int!
  description: String!
}

type DeleteBookResponse {
  clone: DeleteBookResponse
  calculateSize: Int!
  deleted: Boolean!
  message: String
}

type CreateAuthorResponse {
  clone: CreateAuthorResponse
  calculateSize: Int!
  id: Int!
  name: String
}

input CreateAuthorInput {
  name: String!
}

type UpdateAuthorResponse {
  clone: UpdateAuthorResponse
  calculateSize: Int!
  author: AuthorDTO
}

input UpdateAuthorInput {
  id: Int!
  name: String!
}

type DeleteAuthorResponse {
  clone: DeleteAuthorResponse
  calculateSize: Int!
  deleted: Boolean!
  message: String
}

type AuthorPageInfo {
  clone: AuthorPageInfo
  calculateSize: Int!
  page: Int!
  pageSize: Int!
  skip: Int!
  total: Int!
}

type AuthorDTO {
  clone: AuthorDTO
  calculateSize: Int!
  id: Int!
  name: String
}

type PageInfo {
  clone: PageInfo
  calculateSize: Int!
  page: Int!
  pageSize: Int!
  skip: Int!
  total: Int!
}

type BookModel {
  clone: BookModel
  calculateSize: Int!
  id: Int!
  title: String
  author: String
  year: Int!
  country: String
  language: String
  imagelink: String
  stock: Int!
  description: String
}