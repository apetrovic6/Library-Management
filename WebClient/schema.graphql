schema {
  query: Query
  mutation: Mutations
}

"""
The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`.
"""
directive @defer(
  """
  If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to.
  """
  label: String

  """
  Deferred when true.
  """
  if: Boolean
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`.
"""
directive @stream(
  """
  If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to.
  """
  label: String

  """
  The initial elements that shall be send down to the consumer.
  """
  initialCount: Int! = 0

  """
  Streamed when true.
  """
  if: Boolean
) on FIELD

type Query {
  books: [BookType!]!
  bookById(id: Int!): GetBookByIdResponse!
}

type Mutations {
  createBook(bookInput: CreateBookInput!): CreateBookResponse!
  updateBook(id: Int!, bookInput: UpdateBookInput!): UpdateBookResponse!
  deleteBook(id: Int!): DeleteBookResponse!
}

type GetBookByIdResponse {
  clone: GetBookByIdResponse
  calculateSize: Int!
  book: BookModel
}

type BookType {
  id: Int!
  title: String!
  author: String!
  year: Int!
  country: String!
  language: String!
  imageLink: String!
  stock: Int!
  description: String!
}

type CreateBookResponse {
  clone: CreateBookResponse
  calculateSize: Int!
  book: BookModel
}

input CreateBookInput {
  title: String!
  author: String!
  year: Int!
  country: String!
  language: String!
  imageLink: String!
  stock: Int!
  description: String!
}

type UpdateBookResponse {
  clone: UpdateBookResponse
  calculateSize: Int!
  book: BookModel
}

input UpdateBookInput {
  id: Int!
  title: String!
  author: String!
  year: Int!
  country: String!
  language: String!
  imageLink: String!
  stock: Int!
  description: String!
}

type DeleteBookResponse {
  clone: DeleteBookResponse
  calculateSize: Int!
  deleted: Boolean!
  message: String
}

type BookModel {
  clone: BookModel
  calculateSize: Int!
  id: Int!
  title: String
  author: String
  year: Int!
  country: String
  language: String
  imagelink: String
  stock: Int!
  description: String
}
